// 골드바흐의 추측

// 골드바흐의 추측은 유명한 정수론의 미해결 문제로, 2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다는 것이며, 이러한 수를 골드바흐 수라고 한다
// 또, 짝수를 두 소수의 합으로 나타내는 표현을 그 수의 골드바흐 파티션이라고 한다
// 10000보다 작거나 같은 모든 짝수 n에 대한 골드바흐 파티션은 존재한다
// 2보다 큰 짝수 n이 주어졌을 때, n의 골드바흐 파티션을 출력하는 프로그램을 작성하시오
// 만약 가능한 n의 골드바흐 파티션이 여러 가지인 경우에는 두 소수의 차이가 가장 작은 것을 출력한다
// 첫째 줄에 테스트 케이스의 개수 T가 주어진다

nums = {x for x in range(2, 10_001) if x == 2 or x % 2 == 1} // 2와 홀수로 이루어진 집합
for odd in range(3, 101, 2): // 101 == int(math.sqrt(10_000)) + 1
  nums -= {i for i in range(2 * odd, 10_001, odd) if i in nums} // 홀수의 배수로 이루어진 집합을 빼준다

// 골드바흐 수 출력
t = int(input())
for _ in range(t):
  n = int(input())
  half = n//2  // 입력받은 짝수를 2로 나눈 몫을 구함
  for x in range(half, 1, -1):  // 차이가 적은 두 수를 구하기 위해서 큰 수부터 꺼낸다
    if (n-x in nums) and (x in nums): // n-x 와 x가 소수 집합에 포함 되었는지 확인
      print(x, n-x)  // 작은수부터 출력
      break
