// 어떠한 문제가 있을 때 단순 무식하게, 탐욕적으로 문제를 푸는 알고리즘이다. 탐욕적이란 말은 '현재 상황에서 지금 당장 좋은 것만 고르는 방법'을 의미한다.
// 그리디 알고리즘 유형의 문제는 매우 다양하기 때문에 암기한다고 해서 항상 잘 풀 수 있는 알고리즘 유형이 아니다. 
// 그리디 알고리즘은 기준에 따라 좋은 것을 선택하는 알고리즘이므로 문제에서 '가장 큰 순서대로', '가장 작은 순서대로'와 같은 기준을 제시해준다. 

// 거스름돈

// 카운터에는 거스름돈으로 사용할 500원, 100원, 50원, 10원짜리 동전이 무한히 존재한다고 가정한다
// 손님에게 거슬러 줘야 할 돈이 N원일 때 거슬러줘야 할 동전의 최소 개수를 구하라
// 거슬러 줘야 할 돈 N은 항상 10의 배수이다

// '가장 큰 화폐 단위부터' 돈을 거슬러 주는 것이다

n = 1260
count = 0

coin_types = [500, 100, 50, 10] // 큰 단위 화폐부터 차례대로 확인

for coin in coin_types: // 화폐의 종류만큼 반복을 수행하며 화폐의 종류가 K라고 할 때 시간 복잡도는 O(K)이다
  count += n // coin // 해당 화폐로 거슬러 줄 수 있는 동전의 개수 세기
  n %= coin
  
print(count)
