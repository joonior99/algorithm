// 떡볶이 떡 만들기

// 떡볶이 떡은 그 길이가 일정하지 않아서 한 봉지 안에 들어가는 떡의 총 길이는 절단기로 잘라서 맞춰준다
// 절단기에 높이(H)를 지정하면 줄지어진 떡을 한 번에 절단한다
// 높이가 H보다 긴 떡은 H 위의 부분이 잘릴 것이고, 낮은 떡은 잘리지 않는다
// 손님이 왔을 때 요청한 총 길이가 M일 때 적어도 M만큼의 떡을 얻기 위해 절단기에 설정할 수 있는 높이의 최댓값을 구하는 프로그램을 작성하시오
// 첫째 줄에 떡의 개수 N과 요청한 떡의 길이 M이 주어진다(1 <= N <= 1,000,000, 1 <= M <= 2,000,000,000)

// 전형적인 이진 탐색 문제이다
// Parametric Search는 최적화 문제를 결정 문제로 바꾸어 해결하는 기법이다
// '원하는 조건을 만족하는 가장 알맞은 값을 찾는 문제'에 주로 Parametric Search를 사용한다
// 이 문제에서 적절한 높이를 찾을 때까지 절단기의 높이 H를 반복해서 조정하는 것이다
// 범위를 좁힐 때는 이진 탐색의 원리를 이용하여 절반씩 탐색 범위를 좁혀 나간다
// 중간점의 값은 시간이 지날수록 '최적화된 값'을 찾기 때문에, 과정을 반복하면서 얻을 수 있는 떡의 길이 합이 필요한 떡의 길이보다 크거나 같을 때마다 결괏값을 중간점(MID)값으로 갱신해주면 된다

n, m = map(int, input().split(' '))
array = list(map(int, input().split()))

// 이진 탐색을 위한 시작점과 끝점 설정
start = 0
end = max(array)

// 이진 탐색 수행(반복적)
result = 0
while(start <= end):
  total = 0
  mid = (start + end) // 2
  for x in array:
    if x > mid: // 잘랐을 때의 떡의 양 계산
      total += x - mid
  if total < m: // 떡의 양이 부족한 경우 더 많이 자르기(왼쪽 부분 탐색)
    end = mid - 1
  else: // 떡의 양이 충분한 경우 덜 자르기(오른쪽 부분 탐색)
    result = mid // 최대한 덜 잘랐을 때가 정답이므로, 여기에서 result에 기록
    start = mid + 1

print(result)
