// DFS는 Depth-First Search(깊이 우선 탐색)로 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘이다
// 그래프는 노드와 간선으로 표현되며 노드를 정점이라고도 한다
// 그래프 탐색이란 하나의 노드를 시작으로 다수의 노드를 방문하는 것을 말한다
// 두 노드가 간선으로 연결되어 있다면 두 노드는 인접하다고 표현한다
// 인접 행렬: 2차원 배열로 그래프의 연결 관계를 표현하는 방식
// 인접 리스트: 리스트로 그래프의 연결 관계를 표현하는 방식
  
// 인접 행렬 방식
INF = 999999999 // 무한의 비용 선언

// 2차원 리스트를 이용하여 인접 행렬 표현
graph = [
  [0, 7, 5],
  [7, 0, INF],
  [5, INF, 0]
]
print(graph) // [[0, 7, 5], [7, 0, 999999999], [5, 999999999, 0]]


// 파이썬에서는 인접 리스트를 이용해 그래프를 표현하고자 할 때에 단순히 2차원 리스트를 이용하면 된다


// 인접 리스트 방식
// 행이 3개인 2차원 리스트로 인접 리스트 표현
graph = [[] for _ in range(3)]

// 노드 0에 연결된 노드 정보 저장(노드, 거리)
graph[0].append((1, 7))
graph[0].append((2, 5))

// 노드 1에 연결된 노드 정보 저장(노드, 거리)
graph[1].append((0, 7))

// 노드 2에 연결된 노드 정보 저장(노드, 거리)
graph[2].append((0, 5))

print(graph) // [[(1, 7), (2, 5)], [(0, 7)], [(0, 5)]]


// DFS는 스택 자료구조를 이용하며 다음과 같은 동작 과정을 거친다
// 1. 탐색 시작 노드를 스택에 삽입하고 방문 처리를 한다
// 2. 스택의 최상단 노드에 방문하지 않은 인접 노드가 있으면 그 인접 노드를 스택에 넣고 방문 처리를 한다
// 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다
// 3. 2번의 과정을 더 이상 수행할 수 없을 때까지 반복한다
// '방문 처리'는 스택에 한 번 삽입되어 처리된 노드가 다시 삽입되지 않게 체크하는 것을 의미한다
// 일반적으로 인접한 노드 중에서 방문하지 않은 노드가 여러 개 있으면 번호가 낮은 순서부터 처리한다
// DFS는 스택 자료구조에 기초한다는 점에서 구현이 간단하다
// 탐색을 수행함에 있어서 데이터의 개수가 N개인 경우 O(N)의 시간이 소요된다

// DFS 예제
// DFS 메서드 정의
def dfs(graph, v, visited):
  visited[v] = True // 현재 노드를 방문 처리
  print(v, end = '')
  for i in graph[v]: // 현재 노드와 연결된 다른 노드를 재귀적으로 방문
    if not visited[i]:
      dfs(graph, i, visited)

// 각 노드가 연결된 정보를 리스트 자료형으로 표현(2차원 리스트)
graph = [
  [], 
  [2, 3, 8],
  [1, 7], 
  [1, 4, 5],
  [3, 5],
  [3, 4],
  [7],
  [2, 6, 8],
  [1, 7]
]

// 각 노드가 방문된 정보를 리스트 자료형으로 표현(1차원 리스트)
visited = [False] * 9

// 정의된 DFS 함수 호출
dfs(graph, 1, visited) // 1 2 7 6 8 3 4 5
