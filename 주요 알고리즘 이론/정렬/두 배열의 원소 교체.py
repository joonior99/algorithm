// 두 배열의 원소 교체

// 동빈이는 두 개의 배열 A와 B를 가지고 있으며 두 배열은 N개의 원소로 구성되어 있다
// 배열의 원소는 모두 자연수이다
// 최대 K번의 바꿔치기 연산을 수행할 수 있으며 바꿔치기 연산이란 배열 A에 있는 원소 하나와 배열 B에 있는 원소 하나를 골라서 두 원소를 서로 바꾸는 것을 말한다
// 동빈이의 최종 목표는 배열 A의 모든 원소의 합이 최대가 되도록 하는 것이다
// N, K 그리고 배열 A와 B의 정보가 주어졌을 때, 최대 K번의 바꿔치기 연산을 수행하여 만들 수 있는 배열 A의 모든 원소의 합의 최댓값을 출력하는 프로그램을 작성하시오

// 매번 배열 A에서 가장 작은 원소를 골라서, 배열 B에서 가장 큰 원소와 교체를 하는 것이다
// 단, 배열 A에서 가장 작은 원소가 배열 B에서 가장 큰 원소보다 작을 때에만 교체를 수행해야 한다
// 배열 A와 B의 정보가 입력되면 배열 A의 원소를 오름차순으로 정렬하고, 배열 B의 원소를 내림차순으로 정렬한다
// 그리고 두 배열의 원소를 가장 첫번째 인덱스부터 차례대로 비교하면서 A의 원소가 B의 원소보다 작을 때에만 교체를 수행한다

n, k = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))

a.sort() // 배열 A는 오름차순 정렬 수행
b.sort(reverse=True) // 배열 B는 내림차순 정렬 수행

for i in range(k): // 첫번째 인덱스부터 확인하며, 두 배열의 원소를 최대 K번 비교
  if a[i] < b[i]: // A의 원소가 B의 원소보다 작은 경우
    a[i], b[i] = b[i], a[i] // 두 원소를 교체
  else: // A의 원소가 B의 원소보다 크거나 같을 때, 반복문 탈출
    break

print(sum(a))
