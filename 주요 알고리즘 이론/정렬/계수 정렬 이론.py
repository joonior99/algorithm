// 계수 정렬
// 계수 정렬은 특정한 조건이 부합할 때만 사용할 수 있지만 매우 빠른 알고리즘이다
// 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때만 사용할 수 있다
// 일반적으로 가장 큰 데이터와 가장 작은 데이터의 차이가 1,000,000을 넘지 않을 때 효과적으로 사용할 수 있다
// 별도의 리스트를 선언하고 그 안에 정렬에 대한 정보를 담는다는 특징이 있다
// 처음에는 리스트의 모든 데이터가 0이 되도록 초기화시킨다
// 그다음 데이터를 하나씩 확인하며 데이터의 값과 동일한 인덱스의 데이터를 1씩 증가시키면 계수정렬이 완료된다
// 계수 정렬의 시간 복잡도는 O(N + K)이며 N은 데이터의 개수, K는 데이터 중 최대값의 크기를 의미한다
// 계수 정렬의 공간 복잡도는 O(N + K)이다

array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2] // 모든 원소의 값이 0보다 크거나 같다고 가정한다

count = [0] * (max(array) + 1) // 모든 범위를 포함하는 리스트를 선언한다(모든 값은 0으로 초기화)

for i in range(len(array)):
  count[array[i]] += 1 // 각 데이터에 해당하는 인덱스의 값을 증가시킨다

for i in range(len(count)): // 리스트에 기록된 정렬 정보를 확인한다
  for j in range(count[i]): 
    print(i, end='') // 0 0 1 1 2 2 3 4 5 5 6 7 8 9 9
    
// 파이썬의 정렬 라이브러리
// sorted()나 sort()를 이용할 때는 key 값으로 하나의 함수가 들어가야 하며 이는 정렬 기준이 된다
// sorted() 함수
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]
result = sorted(array)
print(result) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

// sort() 함수
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]
array.sort()
print(array) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

// 정렬 라이브러리에서 key를 활용
array = [('바나나', 2), ('사과', 5), ('당근', 3)]
def setting(data):
  return data[1]
result = sorted(array, key=setting)
print(result) // [('바나나', 2), ('당근', 3), ('사과', 5)]
